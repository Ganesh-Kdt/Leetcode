Add 1 to a Linked List Number

You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 10^5
0 <= list[i] <= 10^5

Solution:

class Solution {
    public Node addOne(Node head) {
        if(head==null)
            return head;
        Node temp = head;
        Node prev=null;
        Node front=head.next;
        while(temp!=null){
            temp.next=prev;
            prev=temp;
            temp=front;
            if(front!=null)
            front=front.next;
        }
        
        temp=prev;
        prev=prev.next;
        front=null;
        int carryover=1;
        while(temp!=null){
            int result=temp.data+carryover;
            if(result>9){
                temp.data=0;
                carryover=1;
            }
            else{
                temp.data=result;
                carryover=0;
            }
            temp.next=front;
            front=temp;
            temp=prev;
            if(prev!=null)
            prev=prev.next;
        }
        if(carryover==1){
            Node n=new Node(1);
            head=n;
            head.next=front;
        }
        return head;
        
        
    }
}

Intuition:
1.When we add 1 to a number, we perform addition in reverse manner.
2.Therefore in the linkedlist also we will perform addition from the back and then keep traversing to the start.
3.To perform this operation we need to follow 3 steps-
3.1.First reverse the linkedlist.
3.2.Add 1 to the linkedlist node integer data, and keep adding carryover to the next node.
3.3.During the calculation also keep reversing the linked list si that when we reach to the head of the linked list the linked list will be reversed to its original state.