Find pairs with given sum in doubly linked list

Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value target.

Example 1:

Input:  
1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9
target = 7
Output: (1, 6), (2,5)
Explanation: We can see that there are two pairs 
(1, 6) and (2,5) with sum 7.
 

Example 2:

Input: 
1 <-> 5 <-> 6
target = 6
Output: (1,5)
Explanation: We can see that there is one pairs  (1, 5) with sum 6.

 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findPairsWithGivenSum() which takes head node of the doubly linked list and an integer target as input parameter and returns an array of pairs. If there is no such pair return empty array.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
Constraints:
1 <= N <= 105
1 <= target <= 105

Solution:
class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        Node left=head;
        Node right=head;
        int leftValue=0,rightValue=0;
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        while(right.next!=null)
            right=right.next;
        while(left.data<right.data){
            int sum=left.data+right.data;
            if(sum==target){
                ArrayList<Integer> arr = new ArrayList<>();
                arr.add(left.data);
                arr.add(right.data);
                result.add(arr);
                left=left.next;
                right=right.prev;
            }
            else if(sum>target)
            right=right.prev;
            else
            left=left.next;
        }    
        return result;
    }
}

Intuition:
1.This is a 2sum problem in DLL.
2.Similar to the array's 2 sum problem we can use 2 pointer for solving it.
3.This is possible only because the DLL is sorted.