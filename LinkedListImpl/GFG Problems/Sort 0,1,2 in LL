Given a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to head side, 2s at the end of the linked list, and 1s in the mid of 0s and 2s.

Example 1:

Input:
N = 8
value[] = {1,2,2,1,2,0,2,2}
Output: 0 1 1 2 2 2 2 2
Explanation: All the 0s are segregated
to the left end of the linked list,
2s to the right end of the list, and
1s in between.
Example 2:

Input:
N = 4
value[] = {2,2,0,1}
Output: 0 1 2 2
Explanation: After arranging all the
0s,1s and 2s in the given format,
the output will be 0 1 2 2.
Your Task:
The task is to complete the function segregate() which segregates the nodes in the linked list as asked in the problem statement and returns the head of the modified linked list. The printing is done automatically by the driver code.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 106

Solution - 
1.  if(head==null || head.next==null)
            return head;
        Node temp=head;
        int count0=0;
        int count1=0;
        int count2=0;
        while(temp!=null){
            if(temp.data==0)
                count0++;
            else if(temp.data==1)
                count1++;
            else
                count2++;
            temp=temp.next;
        }
        temp=head;
        while(count0>0){
            temp.data=0;
            temp=temp.next;
            count0--;
        }
        while(count1>0){
            temp.data=1;
            temp=temp.next;
            count1--;
        }
        while(count2>0){
            temp.data=2;
            temp=temp.next;
            count2--;
        }
        return head;

2.Node temp=head;
        Node head0=new Node(-1),temp0=head0;
        Node head1=new Node(-1),temp1=head1;
        Node head2=new Node(-1),temp2=head2;
        while(temp!=null){
            if(temp.data==0){
                temp0.next=temp;
                temp0=temp;
            }
            else if(temp.data==1){
                temp1.next=temp;
                temp1=temp;
            }
            else if(temp.data==2){
                temp2.next=temp;
                temp2=temp;
            }
            temp=temp.next;
        }
        temp0.next=(head1.next!=null)?head1.next:head2.next;
        temp1.next=head2.next;
        temp2.next=null;
        return head0.next;

Intuition -
1.There are 2 ways to solve this problem.
2.One way is to count the number of 0,1 and 2 and add those many numbers in the same linked list by updating their data.
3.Second way is to change the links of the linked list.
4.Whenever we will encounter 0, the linked list links will be connected to a 0 LL.
5.When we encounter 1, the LL will be linked to a 1 LL.
6.Same for 2.
7.Finally we will return the new head.