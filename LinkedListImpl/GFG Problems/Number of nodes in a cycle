Given a linked list of size N. The task is to complete the function countNodesinLoop() that checks whether a given Linked List contains a loop or not and if the loop is present then return the count of nodes in a loop or else return 0. C is the position of the node to which the last node is connected. If it is 0 then no loop.

Example 1:

Input:
N = 10
value[]={25,14,19,33,10,21,39,90,58,45}
C = 4
Output: 7
Explanation: The loop is 45->33. So length of loop is 33->10->21->39-> 90->58->45 = 7. The number 33 is connected to the last node to form the loop because according to the input the 4th node from the beginning(1 basedindex) will be connected to the last node for the loop.
Example 2:

Input:
N = 2
value[] = {1,0}
C = 1
Output: 2
Explanation: The length of the loop
is 2.
Your Task:
The task is to complete the function countNodesinLoop() which contains the only argument as reference to head of linked list and return the length of the loop ( 0 if there is no loop).

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 <= N <= 1000
0 <= C <= N-1

Solution - 
class Solution
{
    //Function to find the length of a loop in the linked list.
    static int countNodesinLoop(Node head)
    {
        if(head==null || head.next==null)
            return 0;
        HashMap<Node,Integer> mp = new HashMap<Node,Integer>();
        Node temp=head;
        int index=0;
        while(temp!=null){
            if(mp.containsKey(temp))
                return index-mp.get(temp);
            mp.put(temp,index);
            temp=temp.next;
            index++;
        }
        return 0;

        OR

        Node fast,slow;
        fast=slow=head;
        int index=1;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(slow==fast){
                fast=fast.next;
                while(fast!=slow){
                    index++;
                    fast=fast.next;
                }
                return index;
            }
        }
        return 0;
    }
}

Intuition - 
1.We have to use HashMap which will store the node refernce and the index of the node.
2.If there is a cycle then the same node refernce will be encountered as a key in the HashMap.
3.In this case we will return the number of nodes in the cycle using the formula - current index(index of the last node+1) - index of the node at which the cycle started. 
4.We can also use fast and slow pointer. Once we find the collission spot we can use a temp variable which will run the whole cycle once and we will use a counter to count the length of the cycle.
