You are given the head_ref of a doubly Linked List and a Key. Your task is to delete all occurrences of the given key if it is present and return the new DLL.

Example1:

Input: 
2<->2<->10<->8<->4<->2<->5<->2
2
Output: 
10<->8<->4<->5
Explanation: 
All Occurences of 2 have been deleted.

Example2:

Input: 
9<->1<->3<->4<->5<->1<->8<->4
9
Output: 
1<->3<->4<->5<->1<->8<->4
Explanation: 
All Occurences of 9 have been deleted.
Your Task:

Complete the function void deleteAllOccurOfX(struct Node** head_ref, int key), which takes the reference of the head pointer and an integer value key. Delete all occurrences of the key from the given DLL.

Expected Time Complexity: O(N).

Expected Auxiliary Space: O(1).

Constraints:

1<=Number of Nodes<=105

0<=Node Value <=109

Solution - 
class Solution {
    static Node deleteAllOccurOfX(Node head, int x) {
        Node temp=head;
        while(temp!=null){
            if(temp.data==x){
                if(temp.prev!=null)
                temp.prev.next=temp.next;
                else
                head=temp.next;
                if(temp.next!=null)
                temp.next.prev=temp.prev;
            }
            temp=temp.next;
        }
        return head;
    }
}

Intuition - 
1.Since it is a doubly linked list we will need to change the link of both prev and next pointer.
2.We can do this by using a temp variable.
3.Whenever the condition of temp.data becomes equal to the x variable which is the node data to be deleted we will perform two operations.
4.We will change the pointer of the previous node from temp to the next node of temp. This will basically help us to skip the temp node while traversing.
5.We will similarly change the pointer of the next node from temp to point to the previous node from temp.
6.We also need to keep in mind about the edge case where the head is our node to be deleted, in this case we will check if the node to be deleted has his prev pointing to a null.
7.If so then we will move our head to the the next node after temp.
