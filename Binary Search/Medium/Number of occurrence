Given a sorted array Arr of size N and a number X, you need to find the number of occurrences of X in Arr.

Example 1:

Input:
N = 7, X = 2
Arr[] = {1, 1, 2, 2, 2, 2, 3}
Output: 4
Explanation: 2 occurs 4 times in the
given array.
Example 2:

Input:
N = 7, X = 4
Arr[] = {1, 1, 2, 2, 2, 2, 3}
Output: 0
Explanation: 4 is not present in the
given array.

Code -
class Solution {
    int count(int[] arr, int n, int x) {
        int low=0,high=arr.length-1,mid=0;
        int count=0,first=-1,last=-1;
        while(low<=high){
            mid=(low+high)/2;
            if(arr[mid]==x){
                first=mid;
                high=mid-1;
            }
            else if(arr[mid]>x){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        low=0;high=arr.length-1;mid=0;
        while(low<=high){
            mid=(low+high)/2;
            if(arr[mid]==x){
                last=mid;
                low=mid+1;
            }
            else if(arr[mid]>x){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        if(first==-1 && last==-1){
            return count;
        }
        else{
            return last-first+1;
        }
        
    }
}


Intuition - 
1.To find occurence of a number we cannot directly use binary search.
2.So find first and last occurence of the element which will give us total occurence of the element.