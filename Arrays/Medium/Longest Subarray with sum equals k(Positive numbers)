Problem Statement - 
 
Given an array containing N integers and an integer K., Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

Example 1:
Input :
A[] = {5 1 3 5 10 7 4 9 2 8}
K = 15
Output : 10
Explanation:
The sub-array is {4 9 2}.

Example 2:
Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.

Note - We can solve this problem using 2 ways - 1.2 pointer algorithm 2.HashMap and Sliding Window.

1.Using 2 pointer algorithm -
Code -  
    public static int lenOfLongSubarr (int A[], int N, int K) {
        int sum=0,max=0,i=0,j=0;
        while(j<N){
            sum=sum+A[j];
            if(sum==K){
                if(j-i+1>max){
                    max=j-i+1;
                }
                sum=sum-A[i++];
            }
            if(sum>K){
                while(sum>K){
                    sum=sum-A[i];
                    i++;
                }
                if(sum==K){
                if(j-i+1>max){
                    max=j-i+1;
                }
                sum=sum-A[i++];
                }
            }
            
            if(sum<K){
                j++;
            }
        }
        return max;
    }

Steps - 
1.This is a sliding window problem. But this is not a static sliding window rather a dynamic sliding window.
2. We will create a sum container and keep the value as 0. And a max container which will also be 0.
3.We will create 2 pointers left=0 and right=0.
4.We will run the loop under right pointer reaches the end of the array.
5.We will keep adding the numbers of the array using the right pointer and store the value in the sum container.
6.There are 3 cases.
6.1.If the value of the sum<k(the desired value), then increment the right pointer.
6.2.If the value of the sum==k, then check if it is greater than the max value, if so then put the sum value in max and decrement the sum using left pointer and increment the left pointer.
6.3.If the value of the sum>k, then we need to increment the left pointer. Before that we need to remove the left pointer value from the sum and then increment it. We need to keep doing this until the sum<=k.
6.4.In 6.3, we need to follow the same steps again as 6.2.


2.HashMap and Sliding Window - 
Code - 
    public static int lenOfLongSubarr (int A[], int N, int K) {
        int maxLen=0;
        int sum=0;
        HashMap<Integer,Integer> hashMap = new HashMap<>();
        hashMap.put(0,-1);
        for(int i=0;i<N;i++){
            sum=sum+A[i];
            if(hashMap.containsKey(sum-K)){
                maxLen = Math.max(maxLen,i-hashMap.get(sum-K));
            }
                hashMap.putIfAbsent(sum,i);
            
        }
        return maxLen;
    }

Note - 
If the array contains negative values, we cannot use 2 pointer algo. We can only use sliding window and hashmap.
